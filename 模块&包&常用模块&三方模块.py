

#使用import语句引入标准库中的模块
import sys
import 函数 #导入同包下的  函数.py 模块内容
#注意： 我们以后使用自定义的模块一般使用 from....import语句，他的作用是从某个模块中导入某一个部分，如下
from 函数 import add # 从 函数.py模块 中导入 add方法，（注：如果不在同一个目录 在from 后面需要添加他的路劲）
''' 常用
有的 from 后面的模块写出来的时候会报错，我们需要在前面加个 .  这个点表示 当前目录下,如下
from .函数 import add 
那我们在下面执行的时候就只需要
#add()就可以了
'''
#包含命令行参数的列表
print(sys.argv)
#自动查找所需模块的路劲的列表
print(sys.path)

#使用模块的里面的 函数,变量,类 例如：函数.方法名
#函数.add()

'''
每个 py文件模块都有一个 __name__属性,当其值是‘__main__’时，表明该模块自身在运行，否则是被当做模块引入，此时值为模块的名字
作用：模块就是一个可执行的python文件，一个模块被另一个模块引入，想让模块中的某一程序不执行，我们可以使用__name__属性来使程序隐藏该块代码
当自身执行时在执行该代码块

例如：我们在一个cc.py模块中，我们如果想让cc.py自身执行某一个功能的时候，我们可以使用,如下来进行执行
if __name__ == "__main__":
    在这里写自身运行的时候的一些代码，也就是if里面的代码是给自己py文件使用的
else:
    在这里我们写一些当被当成模块引入的一些功能代码，也就是else里面的代码是给别的模块使用的
'''
print('__name__ = ',__name__)# 在本py文件中__name__ == __main__ 如果当前的py文件被别的py文件引用的时候__name__ 就是当前py文件名

# 注意：我们在开发中定义模块都使用从 if __name__ == "__main__"开始写代码的

if __name__ == "__main__":
    print("我们自己的代码")
else:
    print('别人使用的代码')

'''
包：为了避免模块名冲突，python又引入了按目录来组织模块的方法，称为包（package）
特点：引入包以后，只要顶层的包名，不与别人的冲突，那么所有的模块都不会与此人的冲突
注意：每个包下面都会有一个名为 __init__.py 的文件(也就是说，一旦当前的目录中出现__init__.py说明他是一个包，否则他就是一个目录)
__init__.py 文件的作用：他可以导出的内容(特别说明：需要在__init__.py文件内)

特此说明__init__.py使用方法： 我们之前导包或者模块的时候 我们需要form 包名.模块名 import 方法1，方法2.....
我们有了 __init__.py 文件以后，我们可以把模块在__init__.py 文件里面去写，然后在别的地方需要使用的时候直接引入当前__init__.py的包就可以了
例如 abc 包下面有一个 __init__.py ，一个 a.py,一个 b.py 文件 在外层有一个 xx.py文件需要使用到 a.py和b.py里面的某一个方法

那么我们首先就可以在 __init__.py 文件中写入： from abc.a import a,from abc.b import b
然后我们在 xx.py文件中就可以直接写入：from abc import a方法，b方法
'''
# 例如 form 包名.模块名 import 方法1，方法2.....


'''
在导入的时候如果包和模块都重名的情况下，我们可以使用 as 取别名

from abc.say import say as s1
from bcd.say import say as s2
我们可以使用如上的一种方法来解决
'''

'''
 内建模块：
 
 time 模块
 UTC（世界协调时间），格林尼治时间，世界标准时间，在中国使用UTC+8
 DST(夏令时间)，是一种为了节约能源而人为的规定时间的制度，一般在天亮的夏季将时间提前一小时

    时间的表示方式
    1，时间戳
      以整型或浮点型表示是一个以秒为单位的时间间隔，这个时间基础是1970年1月1日零时开始算
    2，元祖新式
      一种python的数据结构表示，这个元祖有9个整形元素，分别表示不同时间的含义
      yeay(年)
      month(月,1-12)
      day(天,1-31)
      hours(小时,0-23)
      minutes(分,0-59)
      seconds(秒,0-59)
      weekday(星期,0-6,星期一为0)
      Julian day(表示当前日期在本年是第几天，1-366)
      DST flag(夏令时格式，-1 or 0 or 1)0：正常格式，1：夏令时格式，-1：根据当前日期格式来判断 ，一般情况下都使用 0就可以了 
    3，格式化字符串
        %a	本地（locale）简化星期名称
        %A	本地完整星期名称
        %b	本地简化月份名称
        %B	本地完整月份名称
        %c	本地相应的日期和时间表示
        %d	一个月中的第几天（01 - 31）
        %H	一天中的第几个小时（24小时制，00 - 23）
        %I	第几个小时（12小时制，01 - 12）
        %j	一年中的第几天（001 - 366）
        %m	月份（01 - 12）
        %M	分钟数（00 - 59）
        %p	本地am或者pm的相应符
        %S	秒（01 - 61）
        %U	一年中的星期数。（00 - 53星期天是一个星期的开始。）第一个星期天之前的所有天数都放在第0周。
        %w	一个星期中的第几天（0 - 6，0是星期天）
        %W	和%U基本相同，不同的是%W以星期一为一个星期的开始。
        %x	本地相应日期
        %X	本地相应时间
        %y	去掉世纪的年份（00 - 99）
        %Y	完整的年份
        %Z	时区的名字（如果不存在为空字符）
        %%	‘%’字符 
'''
import time

#time()返回当前时间戳，浮点类型，无需传参
t1 = time.time()
print(t1)

#gmtime(),将时间戳转化为UTC世界时间元祖形式,接收一个浮点型时间戳为参数，如果不传默认值为当前时间的时间戳,如下两个
t2 = time.gmtime(t1)
t3 = time.gmtime()
print(t2)
print(t3)

#localtime()将时间戳转化为本地时间元祖格式，接收一个浮点型时间戳为参数，如果不传默认值为当前时间的时间戳,如下两个
t4 = time.localtime()
print(t4)

#mktime() 将本地时间元祖转为时间戳，接收一个时间元祖
t5 = time.mktime(t4)
print(t5)

#asctime() 将时间元祖格式转为字符串形式，接收一个时间元祖，默认值为localtime时间的时间元祖

t6 = time.asctime(t4)
print(t6)

#ctime() 将时间戳转为字符串，接收一个时间戳，如果不传默认值为当前时间戳

t7 = time.asctime()
t77 = time.asctime(time.localtime())
print(t7)
print(t77)

# strftime() 将时间元祖以指定的格式转换为字符串形式，接收一个字符串格式串
t8 = time.strftime('%Y-%m-%d %X',time.localtime())
print(t8)

#strptime() 与strftime()相反，将时间字符串转为元祖
t9 = time.strptime('1999-10-01 08:08:08','%Y-%m-%d %X')
print(t9)

#sleep(),延迟一个时间，接收浮点或整型
time.sleep(3)#沉睡3秒再运行

'''
time.clock(): 返回当前程序执行时间，Unix系统始终全部运行时间，而window系统从第二次开始都是以第一次调用此函数的时间戳为基准，而不是以程序
开始时间为基准
如下:
'''
print("开始clock函数")
print(time.clock())
time.sleep(2)
print(time.clock())
time.sleep(2)
print(time.clock())

































